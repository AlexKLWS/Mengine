CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )

PROJECT( MengeDependencies )

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

#ADD_SUBDIRECTORY( astralax )
#ADD_SUBDIRECTORY( dxerr )
#ADD_SUBDIRECTORY( cal3d )

#ADD_SUBDIRECTORY( iniparser )
#ADD_SUBDIRECTORY( expat )
#ADD_SUBDIRECTORY( ois )

ADD_SUBDIRECTORY( spine )
ADD_SUBDIRECTORY( libwebp )
#ADD_SUBDIRECTORY( GOAP )

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libfe)    
ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libfe )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  


set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libmovie)    
set(LIBMOVIE_EXTERNAL_BUILD ON CACHE BOOL "LIBMOVIE_EXTERNAL_BUILD" FORCE)
set(LIBMOVIE_COCOS2DX_BUILD OFF CACHE BOOL "LIBMOVIE_COCOS2DX_BUILD" FORCE)
set(LIBMOVIE_EXAMPLES_BUILD OFF CACHE BOOL "LIBMOVIE_EXAMPLES_BUILD" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libmovie )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  

if( MENGINE_PLATFORM_WIN32 )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/jansson)    
    set(USE_URANDOM OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(USE_WINDOWS_CRYPTOAPI OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(JANSSON_STATIC_CRT ON CACHE BOOL "JANSSON_STATIC_CRT" FORCE)
    set(JANSSON_EXAMPLES OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(JANSSON_BUILD_DOCS OFF CACHE BOOL "JANSSON_BUILD_DOCS" FORCE)
    set(JANSSON_WITHOUT_TESTS ON CACHE BOOL "JANSSON_WITHOUT_TESTS" FORCE)    
    set(JANSSON_INSTALL OFF CACHE BOOL "JANSSON_INSTALL" FORCE)    

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/jansson.h ${THIRDPARTY_DIR}/jansson/include/jansson.h COPYONLY)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/jansson_config.h ${THIRDPARTY_DIR}/jansson/include/jansson_config.h COPYONLY)	       

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/jansson )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  
endif()

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/tinyini)    
set(SKIP_INSTALL_ALL ON CACHE BOOL "SKIP_INSTALL_ALL" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/tinyini )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    

if( MENGINE_PLUGIN_TTF )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/freetype)
    set(SKIP_INSTALL_ALL ON CACHE BOOL "SKIP_INSTALL_ALL" FORCE)
    
    configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/freetype/CMakeLists.txt ${THIRDPARTY_DIR}/freetype/CMakeLists.txt COPYONLY)
    
if( MENGINE_PLATFORM_IOS )
    set(IOS_PLATFORM "OS" CACHE STRING "IOS_PLATFORM" FORCE)
endif()

    set(WITH_BZip2 OFF CACHE BOOL "WITH_BZip2" FORCE)

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/freetype )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    
endif()

if( MENGINE_PLUGIN_CURL )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libcurl) 
	
    set(BUILD_CURL_EXE OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
    set(BUILD_TESTING OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
    set(ENABLE_MANUAL OFF CACHE BOOL "to provide the built-in manual" FORCE)
    set(CURL_STATICLIB ON CACHE BOOL "Set to ON to build libcurl with static linking." FORCE)
    set(HTTP_ONLY OFF CACHE BOOL "disables all protocols except HTTP (This overrides all CURL_DISABLE_* options)" FORCE)
    set(CURL_DISABLE_LDAP ON CACHE BOOL "CURL_DISABLE_LDAP" FORCE)
    set(CURL_DISABLE_LDAPS ON CACHE BOOL "CURL_DISABLE_LDAPS" FORCE)
    set(CURL_DISABLE_TELNET ON CACHE BOOL "CURL_DISABLE_TELNET" FORCE)
    set(CURL_DISABLE_DICT ON CACHE BOOL "CURL_DISABLE_DICT" FORCE)
    set(CURL_DISABLE_FILE ON CACHE BOOL "CURL_DISABLE_FILE" FORCE)
    set(CURL_DISABLE_TFTP ON CACHE BOOL "CURL_DISABLE_TFTP" FORCE)
    set(CURL_DISABLE_RTSP ON CACHE BOOL "CURL_DISABLE_RTSP" FORCE)
    set(CURL_DISABLE_POP3 ON CACHE BOOL "CURL_DISABLE_POP3" FORCE)
    set(CURL_DISABLE_IMAP ON CACHE BOOL "CURL_DISABLE_IMAP" FORCE)
    set(CURL_DISABLE_SMTP ON CACHE BOOL "CURL_DISABLE_SMTP" FORCE)
    set(CURL_DISABLE_GOPHER ON CACHE BOOL "CURL_DISABLE_GOPHER" FORCE)
    
if( MENGINE_PLATFORM_XCODE )
    set(CMAKE_USE_OPENSSL OFF CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
endif()
    
if( MENGINE_PLATFORM_WIN32 )    
    set(CMAKE_USE_WINSSL ON CACHE BOOL "Use CMAKE_USE_WINSSL code. Experimental" FORCE)
endif()

if( MENGINE_PLATFORM_IOS )
    set(ENABLE_THREADED_RESOLVER OFF CACHE BOOL "ENABLE_THREADED_RESOLVER" FORCE)
    set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL "Use CMAKE_USE_LIBSSH2 code. Experimental" FORCE)
    set(CMAKE_USE_DARWINSSL ON CACHE BOOL "Use CMAKE_USE_DARWINSSL code. Experimental" FORCE)
endif()
	
    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libcurl )
	
if( MENGINE_PLATFORM_IOS )
    configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/libcurl/curl_config.h ${THIRDPARTY_DIR}/libcurl/lib/curl_config.h COPYONLY)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libcurl/curlbuild.h ${THIRDPARTY_DIR}/libcurl/include/curl/curlbuild.h COPYONLY)	
endif()

    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()


if( MENGINE_TARGET_SDL AND (MENGINE_PLATFORM_MAC OR MENGINE_PLATFORM_WIN32 ) )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/SDL2)  
    set(FORCE_STATIC_VCRT ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
    set(SDL_SHARED OFF CACHE BOOL "Build a static version of the library" FORCE)
    set(SDL_STATIC ON CACHE BOOL "Build a static version of the library" FORCE)
    set(SDL_JOYSTICK OFF CACHE BOOL "SDL_JOYSTICK" FORCE)
    set(SDL_JOYSTICK_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
    set(SDL_HAPTIC OFF CACHE BOOL "SDL_HAPTIC" FORCE)
    set(SDL_HAPTIC_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
    set(SDL_POWER OFF CACHE BOOL "SDL_POWER" FORCE)
    set(SDL_POWER_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)    
    
    add_definitions(-DSDL_DYNAMIC_API=0)
    
    set(CMAKE_DEBUG_POSTFIX "" CACHE STRING "Name suffix for debug builds" FORCE)

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/SDL2 )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()

if( MENGINE_TARGET_SDL )
    ADD_SUBDIRECTORY( sdl2_net )
    ADD_SUBDIRECTORY( sdl2_mixer )
endif()

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/Box2D)
SET(BOX2D_INSTALL OFF CACHE BOOL "Install Box2D libs, includes, and CMake scripts" FORCE)
SET(BOX2D_INSTALL_DOC OFF CACHE BOOL "Install Box2D documentation" FORCE)
SET(BOX2D_BUILD_SHARED OFF CACHE BOOL "Build Box2D shared libraries" FORCE)
SET(BOX2D_BUILD_STATIC ON CACHE BOOL "Build Box2D static libraries" FORCE)
SET(BOX2D_BUILD_EXAMPLES OFF CACHE BOOL "Build Box2D examples" FORCE)
ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/Box2D )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})

if( (MENGINE_TARGET_MSVC OR MENGINE_TARGET_MINGW OR MENGINE_TARGET_SDL) AND MENGINE_PLATFORM_WIN32 )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/openal-soft)
    SET(LIBTYPE STATIC)
    SET(FORCE_STATIC_VCRT ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
    SET(ALSOFT_NO_UID_DEFS OFF CACHE BOOL "Do not define GUIDs, IIDs, CLSIDs, or PropertyKeys" FORCE)
    SET(ALSOFT_DLOPEN ON CACHE BOOL "Check for the dlopen API for loading optional libs" FORCE)
    SET(ALSOFT_WERROR OFF CACHE BOOL "Treat compile warnings as errors" FORCE)
    SET(ALSOFT_UTILS OFF CACHE BOOL "Build and install utility programs" FORCE)
    SET(ALSOFT_NO_CONFIG_UTIL ON CACHE BOOL "Disable building the alsoft-config utility" FORCE)
    SET(ALSOFT_EXAMPLES OFF CACHE BOOL "Build and install example programs" FORCE)
    SET(ALSOFT_TESTS OFF CACHE BOOL "Build and install test programs" FORCE)
    SET(ALSOFT_CONFIG OFF CACHE BOOL "Install alsoft.conf sample configuration file" FORCE)
    SET(ALSOFT_HRTF_DEFS OFF CACHE BOOL "Install HRTF definition files" FORCE)
    SET(ALSOFT_INSTALL OFF CACHE BOOL "Install headers and libraries" FORCE)    
    
    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/openal-soft )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()

if( MENGINE_TARGET_AEPLUGIN )
    ADD_SUBDIRECTORY( ae )
endif()    


ADD_SUBDIRECTORY( lz4 )
ADD_SUBDIRECTORY( libogg )
ADD_SUBDIRECTORY( libvorbis )
ADD_SUBDIRECTORY( libvorbisfile )
ADD_SUBDIRECTORY( libtheora )

#ADD_SUBDIRECTORY( AtlasAllocator )

#ADD_SUBDIRECTORY( simpleini )

ADD_SUBDIRECTORY( stdex )
ADD_SUBDIRECTORY( zlib )
ADD_SUBDIRECTORY( poly2tri )
ADD_SUBDIRECTORY( polyclipping )
#ADD_SUBDIRECTORY( icu )

#ADD_SUBDIRECTORY( Box2D )

ADD_SUBDIRECTORY( libjpeg )
ADD_SUBDIRECTORY( libpng )
#ADD_SUBDIRECTORY( libwebp )

ADD_SUBDIRECTORY( pybind )
ADD_SUBDIRECTORY( Python )

ADD_SUBDIRECTORY( metabuf )
ADD_SUBDIRECTORY( pugixml )

if( MENGINE_TARGET_MSVC )
    ADD_SUBDIRECTORY( Python3 )
    ADD_SUBDIRECTORY( Python3_decimal )
    ADD_SUBDIRECTORY( pybind3 )
    
    ADD_SUBDIRECTORY( xml2metabuf )
endif()