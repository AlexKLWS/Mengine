#	include "Kernel/Affector.h"

namespace Menge
{
	//////////////////////////////////////////////////////////////////////////
	Affector::Affector()
		: m_serviceProvider(nullptr)
		, m_type(ETA_POSITION)	
        , m_id(0)
		, m_speedFactor(1.f)
		, m_freeze(false)
	{
	}
	//////////////////////////////////////////////////////////////////////////
	Affector::~Affector()
	{
	}
    //////////////////////////////////////////////////////////////////////////
    void Affector::setServiceProvider( ServiceProviderInterface * _serviceProvider )		
    {
        m_serviceProvider = _serviceProvider;
	}
	//////////////////////////////////////////////////////////////////////////
	void Affector::setAffectorType( EAffectorType _type )
	{
        m_type = _type;
    }
	//////////////////////////////////////////////////////////////////////////
	void Affector::setId( AFFECTOR_ID _id )
	{
		m_id = _id;
	}
    //////////////////////////////////////////////////////////////////////////
    AFFECTOR_ID Affector::getId() const
    {
        return m_id;
    }
	//////////////////////////////////////////////////////////////////////////
	EAffectorType Affector::getType() const
	{
		return m_type;
	}
	//////////////////////////////////////////////////////////////////////////
	void Affector::setSpeedFactor( float _speedAffector )
	{
		m_speedFactor = _speedAffector;
	}
	//////////////////////////////////////////////////////////////////////////
	float Affector::getSpeedFactor() const
	{
		return m_speedFactor;
	}
	//////////////////////////////////////////////////////////////////////////
	void Affector::setFreeze( bool _value )
	{
		m_freeze = _value;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Affector::getFreeze() const
	{
		return m_freeze;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Affector::prepare()
	{
		return true;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Affector::affect( float _timing )
	{
		if( m_freeze == true )
		{
			return false;
		}

		float total_timing = _timing * m_speedFactor;

		bool isEnd = this->_affect( total_timing );

		return isEnd;
	}
	//////////////////////////////////////////////////////////////////////////
	CallbackAffector::CallbackAffector()
	{
	}
	//////////////////////////////////////////////////////////////////////////
	CallbackAffector::~CallbackAffector()
	{
	}
	//////////////////////////////////////////////////////////////////////////
	void CallbackAffector::setCallback( const AffectorCallbackPtr & _cb )
	{
		m_cb = _cb;
	}
	//////////////////////////////////////////////////////////////////////////
	const AffectorCallbackPtr & CallbackAffector::getCallback() const
	{
		return m_cb;
	}
	//////////////////////////////////////////////////////////////////////////
	void CallbackAffector::complete()
	{
		this->end_( true );
	}
	//////////////////////////////////////////////////////////////////////////
	void CallbackAffector::end_( bool _isEnd )
	{
		if( m_cb != nullptr )
		{
			uint32_t id = this->getId();

			m_cb->onAffectorEnd( id, _isEnd );
		}
	}
}	// namespace Menge
